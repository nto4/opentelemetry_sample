receivers:
  otlp:
    protocols:
      grpc:

processors:
  # batch metrics before sending to reduce API usage
  batch:

exporters:
  logging:
    loglevel: debug

      #  file:
      #    path: "/var/log/otel.log"  # Path to the log file
      #    logs_index: my_log_index
      #    sending_queue:
      #      enabled: true
      #      num_consumers: 20
      #      queue_size: 1000

  elasticsearch:
    endpoints: [ http://172.17.84.53:9200 ]
    tls:
      insecure: true



  prometheus:
    endpoint: "0.0.0.0:8889"  

  zipkin:
    endpoint: "http://172.17.84.53:9411/api/v2/spans"
    format: proto
      #  jaeger:
      #    endpoint: http://172.17.84.53:16686



# https://github.com/open-telemetry/opentelemetry-collector/blob/main/extension/README.md
extensions:
  # responsible for responding to health check calls on behalf of the collector.
  health_check:
  # fetches the collectorâ€™s performance data
  pprof:
  # serves as an http endpoint that provides live debugging data about instrumented components.
  zpages:

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [prometheus]
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [zipkin,elasticsearch]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [elasticsearch]
